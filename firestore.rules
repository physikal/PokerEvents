rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is event owner
    function isEventOwner(eventData) {
      return isAuthenticated() && eventData.ownerId == request.auth.uid;
    }
    
    // Helper function to check if user is event participant
    function isEventParticipant(eventData) {
      return isAuthenticated() && request.auth.uid in eventData.currentPlayers;
    }

    // Helper function to check if user is invited
    function isInvited(eventData) {
      return isAuthenticated() && request.auth.token.email in eventData.invitedPlayers;
    }

    // Events collection rules
    match /events/{eventId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid &&
        request.auth.uid in request.resource.data.currentPlayers;
      
      allow update: if isAuthenticated() && (
        isEventOwner(resource.data) ||
        (
          // Allow updating currentPlayers and invitedPlayers arrays when invited
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentPlayers', 'invitedPlayers']) &&
          (isEventOwner(resource.data) || isInvited(resource.data)) &&
          // Ensure other fields remain unchanged
          request.resource.data.title == resource.data.title &&
          request.resource.data.date == resource.data.date &&
          request.resource.data.location == resource.data.location &&
          request.resource.data.buyIn == resource.data.buyIn &&
          request.resource.data.maxPlayers == resource.data.maxPlayers &&
          request.resource.data.ownerId == resource.data.ownerId &&
          request.resource.data.status == resource.data.status
        )
      );
      
      allow delete: if isEventOwner(resource.data);
    }
  }
}